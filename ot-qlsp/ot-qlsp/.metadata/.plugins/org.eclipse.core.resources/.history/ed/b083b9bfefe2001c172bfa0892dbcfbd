package com.server.config;

import java.util.Properties;
import java.util.logging.Logger;

import javax.sql.DataSource;

import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.env.Environment;
import org.springframework.orm.hibernate5.HibernateTransactionManager;
import org.springframework.orm.hibernate5.LocalSessionFactoryBean;
import org.springframework.transaction.annotation.EnableTransactionManagement;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

import com.mchange.v2.c3p0.ComboPooledDataSource;

@Configuration
@EnableWebMvc
@EnableTransactionManagement
@ComponentScan(basePackages = "com.server")
@PropertySource({"classpath:persistence-mssql.properties"})
public class AppConfig implements WebMvcConfigurer{
	@Autowired
	private Environment env;
	private Logger logger = Logger.getLogger(getClass().getName());
	
	@Bean
	private DataSource dataSource() {
		ComboPooledDataSource com = new ComboPooledDataSource();
		
		try {
			com.setDriverClass(env.getProperty("jdbc.driver"));
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		logger.info(env.getProperty("jdbc.url"));
		
		com.setJdbcUrl(env.getProperty("jdbc.url"));
		com.setUser(env.getProperty("jdbc.user"));
		com.setPassword(env.getProperty("jdbc.password"));
		
		com.setInitialPoolSize(getInt("connection.pool.initialPoolSize"));
		com.setMinPoolSize(getInt("connection.pool.minPoolSize"));
		com.setMaxPoolSize(getInt("connection.pool.maxPoolSize"));
		com.setMaxIdleTime(getInt("connection.pool.maxIdleTime"));
		
		return com;
	}
	
	private int getInt(String name) {
		String prop = env.getProperty(name);
		int val = Integer.parseInt(prop);
		return val;
	}
	
	private Properties getProperties() {
		Properties properties = new Properties();
		properties.setProperty("hibernate.dialect", env.getProperty("hibernate.dialect"));
		properties.setProperty("hibernate.show_sql", env.getProperty("hibernate.show_sql"));
		
		return properties;
	}
	
	@Bean
	public LocalSessionFactoryBean localSessionFactoryBean() {
		LocalSessionFactoryBean bean = new LocalSessionFactoryBean();
		bean.setDataSource(dataSource());
		bean.setPackagesToScan(env.getProperty("hibernate.packagesToScan"));
		bean.setHibernateProperties(getProperties());
		
		return bean;
	}
	
	@Bean
	@Autowired
	public HibernateTransactionManager manager(SessionFactory sessionFactory) {
		HibernateTransactionManager transactionManager = new HibernateTransactionManager();
		transactionManager.setSessionFactory(sessionFactory);
		
		return transactionManager;
	}
}
